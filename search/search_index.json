{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Web3Gate - A Blockchain as a Service platform offering crypto launchpad, API, and more Web3Gate is a Blockchain-as-a-Service (BaaS) application with a decentralized multi-chain launchpad system and a complete crypto payment API for native and custom tokens. Web3Gate is a completely functional BaaS software that is extremely secure, intuitive, and smart. It has a crypto payment API for native (such as BTC, ETH, MATIC, BNB, CRO, ONE, FTM, AVAX, etc.) and ERC20 tokens that users can integrate into their website/web application to create and receive crypto payments for their products or services, using Metamask wallet or other web3 wallets for completing transactions, with the ability for users to add their ERC20 token to their payment option. It also has a decentralized multi-chain launchpad system that allows users to create a staking pool for their token and can manage the staking progress and stakes of the pool. Web3Gate is developed with the PHP programming language and Laravel 9 MVC framework - the most widely used PHP MVC framework. It also uses Tailwindcss, Vue.js framework, and ethers.js library (for interacting with smart contracts and web3 wallets).","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#web3gate-a-blockchain-as-a-service-platform-offering-crypto-launchpad-api-and-more","text":"Web3Gate is a Blockchain-as-a-Service (BaaS) application with a decentralized multi-chain launchpad system and a complete crypto payment API for native and custom tokens. Web3Gate is a completely functional BaaS software that is extremely secure, intuitive, and smart. It has a crypto payment API for native (such as BTC, ETH, MATIC, BNB, CRO, ONE, FTM, AVAX, etc.) and ERC20 tokens that users can integrate into their website/web application to create and receive crypto payments for their products or services, using Metamask wallet or other web3 wallets for completing transactions, with the ability for users to add their ERC20 token to their payment option. It also has a decentralized multi-chain launchpad system that allows users to create a staking pool for their token and can manage the staking progress and stakes of the pool. Web3Gate is developed with the PHP programming language and Laravel 9 MVC framework - the most widely used PHP MVC framework. It also uses Tailwindcss, Vue.js framework, and ethers.js library (for interacting with smart contracts and web3 wallets).","title":"Web3Gate - A Blockchain as a Service platform offering crypto launchpad, API, and more"},{"location":"1_installation/","text":"Installation To install the Web3Gate application you will need install the following software on your system Composer Downloaded File layout This is the layout of your downloaded zip file after decompressed it. web3gate/ source-code/ # contain the source code Documentation/ # documentation folder Installing Packages & Setup Software Requirements - PHP 8.0.1 or later - OpenSSL PHP Extension - PDO PHP Extension - Mbstring PHP Extension - Tokenizer PHP Extension - XML PHP Extension - Ctype PHP Extension - JSON PHP Extension - BCMath PHP Extension - FileInfo PHP Extension Install packages Open the source-code folder with your terminal and run the following command to installed all the packages needed by this application. Make sure you are in the root directory of the source-code folder. Note: you will need to install composer to follow this step. $ composer install Create environment file Now that you have install all the packages needed, create a .env file at the root of the application and copy the content of the .env.example into .env you have just create. You can use the following command to acheive this: $ cp .env.example .env Generate app key Run the following command to generate app key: $ php artisan key:generate Configure the environment variable After the .env file has been created, open the .env file and change the value of the following variables APP_NAME=you-app-name-here APP_ENV=local # development or production APP_DEBUG=false # true if you want to a display error message APP_URL=https://example.com # the domain of the server you upload this to (http://localhost if running on your computer) DB_CONNECTION=mysql # pgsql for postgreSQL database DB_HOST=127.0.0.1 DB_PORT=3306 # 5432 for postgreSQL DB_DATABASE=database-you-created DB_USERNAME=database-username DB_PASSWORD=database-password To be able to use bitcoin network in your application, you will need to get an API key from blockchain.com and set it in your .env file BLOCKCHAIN_API_KEY=your-blockchain-api-key-here Database Migration After setting up the .env file, now run the following command to setup the database. $ php artisan migrate Seeding Make sure to set the enviroment variable for the super admin as this will be the top level admin that has all the previledges, and you will use it for login. ADMIN_USERNAME=your-username ADMIN_EMAIL=your-email ADMIN_PASSWORD=your-password then run: $ php artisan db:seed Run the app You can now run the app by running the following command: $ php artisan serve Frontend Setup Web3Gate uses Vue.js for it frontend and if you would like to make changes to your frontend, you must have node.js or yarn installed on your computer. Installing the node packages Now you can install the node packages using the following command: $ npm install // or $ yarn install Compile your project To compile your project use the following command: $ npm run dev // or $ yarn dev","title":"Installation"},{"location":"1_installation/#installation","text":"To install the Web3Gate application you will need install the following software on your system Composer","title":"Installation"},{"location":"1_installation/#downloaded-file-layout","text":"This is the layout of your downloaded zip file after decompressed it. web3gate/ source-code/ # contain the source code Documentation/ # documentation folder","title":"Downloaded File layout"},{"location":"1_installation/#installing-packages-setup","text":"","title":"Installing Packages &amp; Setup"},{"location":"1_installation/#software-requirements","text":"- PHP 8.0.1 or later - OpenSSL PHP Extension - PDO PHP Extension - Mbstring PHP Extension - Tokenizer PHP Extension - XML PHP Extension - Ctype PHP Extension - JSON PHP Extension - BCMath PHP Extension - FileInfo PHP Extension","title":"Software Requirements"},{"location":"1_installation/#install-packages","text":"Open the source-code folder with your terminal and run the following command to installed all the packages needed by this application. Make sure you are in the root directory of the source-code folder. Note: you will need to install composer to follow this step. $ composer install","title":"Install packages"},{"location":"1_installation/#create-environment-file","text":"Now that you have install all the packages needed, create a .env file at the root of the application and copy the content of the .env.example into .env you have just create. You can use the following command to acheive this: $ cp .env.example .env","title":"Create environment file"},{"location":"1_installation/#generate-app-key","text":"Run the following command to generate app key: $ php artisan key:generate","title":"Generate app key"},{"location":"1_installation/#configure-the-environment-variable","text":"After the .env file has been created, open the .env file and change the value of the following variables APP_NAME=you-app-name-here APP_ENV=local # development or production APP_DEBUG=false # true if you want to a display error message APP_URL=https://example.com # the domain of the server you upload this to (http://localhost if running on your computer) DB_CONNECTION=mysql # pgsql for postgreSQL database DB_HOST=127.0.0.1 DB_PORT=3306 # 5432 for postgreSQL DB_DATABASE=database-you-created DB_USERNAME=database-username DB_PASSWORD=database-password To be able to use bitcoin network in your application, you will need to get an API key from blockchain.com and set it in your .env file BLOCKCHAIN_API_KEY=your-blockchain-api-key-here","title":"Configure the environment variable"},{"location":"1_installation/#database","text":"","title":"Database"},{"location":"1_installation/#migration","text":"After setting up the .env file, now run the following command to setup the database. $ php artisan migrate","title":"Migration"},{"location":"1_installation/#seeding","text":"Make sure to set the enviroment variable for the super admin as this will be the top level admin that has all the previledges, and you will use it for login. ADMIN_USERNAME=your-username ADMIN_EMAIL=your-email ADMIN_PASSWORD=your-password then run: $ php artisan db:seed","title":"Seeding"},{"location":"1_installation/#run-the-app","text":"You can now run the app by running the following command: $ php artisan serve","title":"Run the app"},{"location":"1_installation/#frontend-setup","text":"Web3Gate uses Vue.js for it frontend and if you would like to make changes to your frontend, you must have node.js or yarn installed on your computer.","title":"Frontend Setup"},{"location":"1_installation/#installing-the-node-packages","text":"Now you can install the node packages using the following command: $ npm install // or $ yarn install","title":"Installing the node packages"},{"location":"1_installation/#compile-your-project","text":"To compile your project use the following command: $ npm run dev // or $ yarn dev","title":"Compile your project"},{"location":"2_setup/","text":"Setup In this section, we will explain what you need to setup your applicaiton Blockchain Network Setting up blockchain networks means you are adding a network RPC configuration which is going to be available for users to select from. Note : this software currently supports EVM based blockchain and to intereact with Bitcoin you will have to get a blockchain API Key We have created a database seeder for some network that you can just seed into your database to safe you some time. To seed this networks, run the following command: php artisan db:seed --class=NetworkSeeder Note : if you set your APP_ENV enviroment variable to local or development it will seed a testnet blockchain networks into your database, however, setting it to production will seed mainnet blockchain networks into your database. Except for Bitcoin which will always seed mainnet. You can also add blockchain manually: Login and navigate to the admin panel On the sidebar, click blockchain > networks There you can perform CRUD operation on the blockchain network. Note : Admin user only have access to this module Staking Pool contract deployment For users to be able to launch a staking pool for their token, you will need to deploy the staking pool smart contract to the blockchain network you have added. To deploy the smart contract: Login and navigate to the admin panel On the sidebar, click blockchain > smart contracts In the contract page click Add contract button In the open modal connect to your web3 wallet, select the network you are deploying to, select contract type And click the Deploy button","title":"Setup"},{"location":"2_setup/#setup","text":"In this section, we will explain what you need to setup your applicaiton","title":"Setup"},{"location":"2_setup/#blockchain-network","text":"Setting up blockchain networks means you are adding a network RPC configuration which is going to be available for users to select from. Note : this software currently supports EVM based blockchain and to intereact with Bitcoin you will have to get a blockchain API Key We have created a database seeder for some network that you can just seed into your database to safe you some time. To seed this networks, run the following command: php artisan db:seed --class=NetworkSeeder Note : if you set your APP_ENV enviroment variable to local or development it will seed a testnet blockchain networks into your database, however, setting it to production will seed mainnet blockchain networks into your database. Except for Bitcoin which will always seed mainnet. You can also add blockchain manually: Login and navigate to the admin panel On the sidebar, click blockchain > networks There you can perform CRUD operation on the blockchain network. Note : Admin user only have access to this module","title":"Blockchain Network"},{"location":"2_setup/#staking-pool-contract-deployment","text":"For users to be able to launch a staking pool for their token, you will need to deploy the staking pool smart contract to the blockchain network you have added. To deploy the smart contract: Login and navigate to the admin panel On the sidebar, click blockchain > smart contracts In the contract page click Add contract button In the open modal connect to your web3 wallet, select the network you are deploying to, select contract type And click the Deploy button","title":"Staking Pool contract deployment"},{"location":"3_payment/","text":"Payment Process In this section, you will learn how you can create a payment for your products/services in Web3Gate Add Wallet Your wallet is the public key of your crypto wallet, which will be used for receiving payments from customers/users. And to create a payment, you will need to add your wallet. To add wallet: Navigate to wallet page On the Select a blockchain network Type a custom name you want to give the wallet Copy your crypto public key into the Public Key field. Note: make sure you add a correct public key based on the network you selected. And finally click Create Wallet button. The dedicated wallet you added will be shown in the payment options list for your customers to choose from on the payment page, and make their payments. Create App Before you can create a payment you need to create an app. Each app you create on Web3Gate serves as a web/mobile application you want to integrate Web3Gate into and helps you categorize all your payment activities. The dedicated wallet(s) you associate with the App will only show as an option for customers to pay you in. To create an App: Navigate to My App page Add new app using the Create App form Create Payment Now that we have the app and wallet set up, we can now create the payment. To create a payment: Make Payment Now that we have created a payment, you will need to copy the payment and load it in a browser, properly in a new tab (you can send this link to your customer/client that wants to pay you). To copy the payment link: Navigate to the payment page Go to the payment list section and click the \"copy link\" link on the payment table under the related app. Once the link is loaded, you will see a payment form. In the payment form, select the network you want to pay with, then click connect network: Note: Make sure you have a Metamask wallet setup in your browser. \u2014 Image here \u2014","title":"Payment Process"},{"location":"3_payment/#payment-process","text":"In this section, you will learn how you can create a payment for your products/services in Web3Gate","title":"Payment Process"},{"location":"3_payment/#add-wallet","text":"Your wallet is the public key of your crypto wallet, which will be used for receiving payments from customers/users. And to create a payment, you will need to add your wallet. To add wallet: Navigate to wallet page On the Select a blockchain network Type a custom name you want to give the wallet Copy your crypto public key into the Public Key field. Note: make sure you add a correct public key based on the network you selected. And finally click Create Wallet button. The dedicated wallet you added will be shown in the payment options list for your customers to choose from on the payment page, and make their payments.","title":"Add Wallet"},{"location":"3_payment/#create-app","text":"Before you can create a payment you need to create an app. Each app you create on Web3Gate serves as a web/mobile application you want to integrate Web3Gate into and helps you categorize all your payment activities. The dedicated wallet(s) you associate with the App will only show as an option for customers to pay you in. To create an App: Navigate to My App page Add new app using the Create App form","title":"Create App"},{"location":"3_payment/#create-payment","text":"Now that we have the app and wallet set up, we can now create the payment. To create a payment:","title":"Create Payment"},{"location":"3_payment/#make-payment","text":"Now that we have created a payment, you will need to copy the payment and load it in a browser, properly in a new tab (you can send this link to your customer/client that wants to pay you). To copy the payment link: Navigate to the payment page Go to the payment list section and click the \"copy link\" link on the payment table under the related app. Once the link is loaded, you will see a payment form. In the payment form, select the network you want to pay with, then click connect network: Note: Make sure you have a Metamask wallet setup in your browser. \u2014 Image here \u2014","title":"Make Payment"},{"location":"4_source-credit/","text":"Dependencies PHP Framework & Libraries -> Laravel 9.x API -> Blockchain CSS Framework -> Tailwindcss 3.x Fonts & Icons -> Nunito -> Iconify Our Plugin -> @lolaji/form 0.0.1 Javascript Framework & Libraries -> Vue.js 3.x -> vuex 4.0.2, -> Ethers.js 5.x -> hardhat 2.11.2 -> web3modal -> Moment.js -> Vue3-clipboard -> primevue 3.8.1 -> @headlessui/vue -> @walletconnect/web3-provider","title":"Dependencies"},{"location":"4_source-credit/#dependencies","text":"","title":"Dependencies"},{"location":"4_source-credit/#php-framework-libraries","text":"-> Laravel 9.x","title":"PHP Framework &amp; Libraries"},{"location":"4_source-credit/#api","text":"-> Blockchain","title":"API"},{"location":"4_source-credit/#css-framework","text":"-> Tailwindcss 3.x","title":"CSS Framework"},{"location":"4_source-credit/#fonts-icons","text":"-> Nunito -> Iconify","title":"Fonts &amp; Icons"},{"location":"4_source-credit/#our-plugin","text":"-> @lolaji/form 0.0.1","title":"Our Plugin"},{"location":"4_source-credit/#javascript-framework-libraries","text":"-> Vue.js 3.x -> vuex 4.0.2, -> Ethers.js 5.x -> hardhat 2.11.2 -> web3modal -> Moment.js -> Vue3-clipboard -> primevue 3.8.1 -> @headlessui/vue -> @walletconnect/web3-provider","title":"Javascript Framework &amp; Libraries"},{"location":"change-log/","text":"Change Log","title":"Change Log"},{"location":"change-log/#change-log","text":"","title":"Change Log"},{"location":"error-troubleshoot/","text":"Errors & Troubleshooting","title":"Errors & Troubleshooting"},{"location":"error-troubleshoot/#errors-troubleshooting","text":"","title":"Errors &amp; Troubleshooting"}]}